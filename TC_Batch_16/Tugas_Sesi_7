import pygame as pg
import random as ran

# Inisialisasi Pygame
pg.init()
pg.mixer.init()

# Ukuran layar
WIDTH, HEIGHT = 800, 600
screen = pg.display.set_mode((WIDTH, HEIGHT))
pg.display.set_caption("Space Shooter")

# Warna
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# FPS
FPS = 60
clock = pg.time.Clock()

# Load gambar
background_img = pg.image.load('C:\GitHub\GameDev\TC_Batch_16\Asset\jkt48.jpg')
player_img = pg.image.load('C:\GitHub\GameDev\TC_Batch_16\Asset\ship.png')
enemy_img = pg.image.load('C:\GitHub\GameDev\TC_Batch_16\Asset\meteor.png')
bullet_img = pg.image.load('C:\GitHub\GameDev\TC_Batch_16\Asset\meteor.png')

# Kelas pemain
class Player(pg.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = player_img
        self.rect = self.image.get_rect()
        self.rect.centerx = WIDTH // 2
        self.rect.bottom = HEIGHT - 10
        self.speed = 5

    def update(self):
        keys = pg.key.get_pressed()
        if keys[pg.K_LEFT]:
            self.rect.x -= self.speed
        if keys[pg.K_RIGHT]:
            self.rect.x += self.speed

        # Batasi pergerakan pemain agar tidak keluar layar
        self.rect.x = max(0, min(self.rect.x, WIDTH - self.rect.width))

    def shoot(self):
        bullet = Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)


# Kelas musuh
class Enemy(pg.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = enemy_img
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, WIDTH - self.rect.width)
        self.rect.y = random.randint(-100, -40)
        self.speed = random.randint(2, 8)

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:
            self.rect.x = random.randint(0, WIDTH - self.rect.width)
            self.rect.y = random.randint(-100, -40)
            self.speed = random.randint(2,8)

# Kelas peluru
class Bullet(pg.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = bullet_img
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed = -10

    def update(self):
        self.rect.y += self.speed
        if self.rect.bottom < 0:
            self.kill()


# Buat semua sprite
all_sprites = pg.sprite.Group()
enemies = pg.sprite.Group()
bullets = pg.sprite.Group()

player = Player()
all_sprites.add(player)

# Loop game
run = True
game_over = False
while run:
    clock.tick(FPS)

    # Close the game if 'x' is pressed
    for event in pg.event.get():
        if event.type == pg.QUIT:
            run = False

    # Level up logic
    if score >= 10 * level:
        level += 1
        for i in range(5):
            enemy = Enemies()
            enemy.speed = ran.randint(2 + level, 6 + level)
            all_sprites.add(enemy)
            enemies.add(enemy)

    # Game over logic
    if not game_over:
        # Update all sprites
        all_sprites.update()

    # Check if the player hits an enemy
    hits = pg.sprite.spritecollide(player, enemies, False)
    if hits:
        hit_sound.play()
        game_over = True
        game_over_time = (pg.time.get_ticks() - start) // 1000  # Calculate survival time score

    # Update highest score
    if game_over_time > highest_score:
        highest_score = game_over_time

    # Calculate final score
    score = (pg.time.get_ticks() - start) // 1000

    # Display background
    screen.blit(image, (0, 0))

    # Draw objects
    all_sprites.draw(screen)

    # Display score
    font = pg.font.SysFont(None, 30)
    text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(text, (10, 10))

    # Display level
    font = pg.font.SysFont(None, 30)
    text = font.render(f"Level: {level}", True, WHITE)
    screen.blit(text, (10, 30))

    # Display game over and highest score
    if game_over:
        over_text = font.render(f"Game Over! Your Best Score: {highest_score}", True, WHITE)
        screen.blit(over_text, (WIDTH // 2 - 150, HEIGHT // 2))

        # Draw restart game button
        draw_button("Restart Game", WIDTH // 3, HEIGHT // 3 + 150, 250, 60, BLUE, RED, start_game)

    # Update display
    pg.display.flip()

pg.quit()

# Create main menu function
def main_menu():
    menu = True
    while menu:
        # Display background
        screen.blit(image, (0, 0))

        # Display game title
        font = pg.font.SysFont(None, 70)
        draw_text("Dodge The Enemies", font, WHITE, WIDTH // 4, HEIGHT // 4)

        # Display start button
        draw_button("Start Game", WIDTH // 3, HEIGHT // 3, 200, 60, BLUE, RED, start_game)

        # Close game if 'x' is pressed
        for event in pg.event.get():
            if event.type == pg.QUIT:
                menu = False

        pg.display.update()
        clock.tick(15)

# Start the program
if __name__ == '__main__':
    main_menu()
